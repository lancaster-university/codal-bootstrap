name: Bootstrap a new project from scratch

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-py-script:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        gcc: ['7-2017-q4']
        cmake: ['3.23.1', '3.6.0']
        target: [ 'codal-microbit-v2' ]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }}, gcc ${{ matrix.gcc }}, cmake ${{ matrix.cmake || 'latest'}}
    steps:
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Setup arm-none-eabi-gcc ${{ matrix.gcc }}
        uses: carlosperate/arm-none-eabi-gcc-action@v1
        with:
          release: ${{ matrix.gcc }}
      - name: Setup CMake ${{ matrix.cmake }}
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: ${{ matrix.cmake }}
      - name: Install Ninja via PyPI
        run: python -m pip install ninja
      - name: Check Versions
        run: |
          arm-none-eabi-gcc --version
          cmake --version
          ninja --version
          python --version
      - name: Install colorama dependency, needed for fancy log colours
        run: |
          python -m pip install --upgrade pip
          pip install colorama
      - name: Clone the bootstrap sources
        working-directory: ${{ runner.temp }}
        run: |
          git clone https://.:${{ secrets.GITHUB_TOKEN }}@github.com/lancaster-university/codal-bootstrap.git bootstrap
      - name: Create a new base project
        run: |
          cp ${{ runner.temp }}/bootstrap/build.py ./build.py
          python ./build.py
      - name: Pull libraries for a target - ${{ matrix.target }}
        run: |
          python ./build.py ${{ matrix.target }}
      - name: Compile the example application
        run: |
          python ./build.py
      - name: "Check the build actually generated a hex file"
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "MICROBIT.hex"
      - name: File exists
        if: steps.check_files.outputs.files_exists == 'true'
        run: echo Hex file built!